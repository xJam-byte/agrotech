import { Injectable, NotFoundException, Inject } from "@nestjs/common";
import { InjectModel } from "@nestjs/sequelize";
import { HttpService } from "@nestjs/axios";
import { lastValueFrom } from "rxjs";
import OpenAI from "openai";
import { User } from "../user/user.model";

@Injectable()
export class WeatherService {
  private readonly API_URL = "https://api.openweathermap.org/data/2.5/weather";
  private readonly API_KEY = process.env.WEATHER_API_KEY;
  private readonly openai: OpenAI;

  constructor(
    @Inject(HttpService) private readonly httpService: HttpService,
    @InjectModel(User) private readonly userModel: typeof User
  ) {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  async getWeatherForUser(userId: number): Promise<any> {
    const user = await this.userModel.findByPk(userId);
    if (!user || !user.location) {
      throw new NotFoundException(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è"
      );
    }

    try {
      const response = await lastValueFrom(
        this.httpService.get(`${this.API_URL}`, {
          params: {
            q: user.location,
            units: "metric",
            appid: this.API_KEY,
          },
        })
      );
      return response.data;
    } catch (error) {
      throw new NotFoundException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ");
    }
  }

  async getCareRecommendations(userId: number): Promise<string> {
    const weather = await this.getWeatherForUser(userId);
    const temp = weather.main.temp;
    const humidity = weather.main.humidity;
    const condition = weather.weather[0]?.description || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è";

    const prompt = `
      –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:
      - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C
      - –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%
      - –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: ${condition}

      –ò—Å–ø–æ–ª—å–∑—É–π –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
      - "üî• –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞! –ü–æ—Å—Ç–∞–≤—å—Ç–µ –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å –≤ —Ç–µ–Ω—å."
      - "üí¶ –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å! –ü–æ–ª–∏–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
      - "‚úÖ –ü–æ–≥–æ–¥–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è —Ä–æ—Å—Ç–∞."
    `;

    try {
      const response = await this.openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          { role: "system", content: "–¢—ã ‚Äî –±–æ—Ç-–∞–≥—Ä–æ–Ω–æ–º." },
          { role: "user", content: prompt },
        ],
      });

      return (
        response.choices[0].message?.content || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ AI:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç AI");
    }
  }
}
